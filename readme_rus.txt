/* $Id: readme_rus.txt,v 1.6 2010/08/13 16:43:27 ptsarenko Exp $ */

      Leto DB Server - это многоплатформенный сервер БД, или СУБД, 
 в основном предназначенный для клиентских программ, написанных на языке Harbour,
 для доступа к файлам dbf/cdx, расположенным на удаленном сервере.

Содержание
--------

1. Структура каталогов
2. Сборка letodb
   2.1 Компилятор Borland Win32 C
   2.2 Компилятор Linux GNU C
   2.3 xHarbour Builder
   2.4 Компилятор Mingw C
   2.5 Сборка letodb с помощью hbmk
3. Запуск и остановка сервера
4. Конфигурирование сервера
   4.1 letodb.ini
   4.2 Авторизация пользователей
5. Соединение с сервером клиентских программ
6. Управление переменными
7. Список функций
8. Утилита управления сервером


      1. Структура каталогов

      bin/          -    исполняемый файл сервера
      doc/          -    документация
      include/      -    файлы заголовков
      lib/          -    библиотека rdd
      source/
          client/   -    исходные тексты rdd
          common/   -    общие исходные тексты для сервера и rdd
          client/   -    исходные тексты сервера
      tests/        -    тестовые программы, примеры
      utils/
          manage/   -    исходные тексты утилиты управления сервером


      2. Сборка letodb

      2.1 Компилятор Borland Win32 C

      Переменная окружения HB_PATH, в которой устанавливается путь к каталогу
 Harbour, должна быть установлена перед компиляцией. Это можно сделать,
 к примеру, добавив строоку в make_b32.bat:

          SET HB_PATH=c:\harbour

 Если Вы используете xHarbour, снимите комментарий со строки 'XHARBOUR = yes' в makefile.bc.
 Затем запустите make_b32.bat, и исполняемый файл сервера letodb.exe будет создан в каталоге bin/,
 а библиотека rdd rddleto.lib - в каталоге lib/.

      2.2 Компилятор Linux GNU C

      Переменная окружения HB_ROOT, в которой устанавливается путь к каталогу
 Harbour, должна быть установлена перед компиляцией. Или просто измените
 значение HRB_DIR в файле Makefile.linux.

 Затем запустите make_linux.sh, и исполняемый файл сервера letodb будет создан
 в каталоге bin/, а библиотека rdd librddleto.a - в каталоге lib/.

      2.3 xHarbour Builder

      Запустите make_xhb.bat для сборки letodb этим компилятором. Возможно,
  необходимо будет изменить путь к xHarbour Builder в make_xhb.bat.
  Значение пути к xHarbour Builder по умолчанию:

          set XHB_PATH=c:\xhb

      2.4 Компилятор Mingw C

      Переменная окружения HB_PATH, в которой устанавливается путь к каталогу
 Harbour,  должна быть установлена перед компиляцией. Этот можно сделать,
 вставив строку в файл make_mingw.bat:

          SET HB_PATH=c:\harbour

 Если Вы используете xHarbour, снимите комментарий со строки 'XHARBOUR = yes'
 в файле makefile.gcc. Затем запустите the make_mingw.bat, и исполняемый файл
 сервера letodb.exe будет создан в каталоге bin/, а библиотека rdd 
 librddleto.a - в каталоге lib/.

      2.5 Сборка letodb с помощью hbmk

      Сейчас появилась возможность собрать letodb с помощью утилиты сборки Harbour,
 написанной Viktor Szakats. Синтаксис командной строки для сборки:

      hbmk2 [-hb10|-xhb] rddleto.hbp letodb.hbp [-target=tests/test_ta.prg]

 Дополнительные параметры: -hb10 - Harbour version is 1.0 or 1.0.1,
                      -xhb - xHarbour,
                      -target="blank"\test_ta.prg - сборка тестовых примеров.

      3. Запуск и остановка сервера

      Просто запустите:
      
      letodb.exe                    ( под Windows )
      ./letodb                      ( под Linux )

      Для остановки сервера запустите тот же исполняемый файл с параметром
 'stop':

      letodb.exe stop               ( под Windows )
      ./letodb stop                 ( под Linux )

      4. Конфигурирование сервера

      4.1 letodb.ini

      Если Вас не устраивают параметры по умолчанию, Вы можете установить
 значения переменных конфигурации в файле letodb.ini. В настоящее время
 существуют следующие параметры конфигурации ( указаны значения по умолчанию ):

      Port = 2812              -    порт сервера;
      DataPath =               -    путь к базе данных на сервере;
      Log = letodb.log         -    путь и имя лог-файла;
      Default_Driver = CDX     -    RDD по умолчанию для открытия файлов на сервере ( CDX/NTX );
      Lower_Path = 0           -    если 1, преобразовать все пути к нижнему регистру;
      EnableFileFunc = 0       -    если 1, разрешено использование файловых функций
                                    ( leto_file(), leto_ferase(), leto_frename();
      EnableAnyExt = 0         -    если 1, разрешено создание таблиц данных и индексов с расширением,
                                    отличным от стандартного ( dbf,cdx,ntx );
      Pass_for_Login = 0       -    если 1, необходима авторизация пользователя
                                    для соединения с сервером;
      Pass_for_Manage = 0      -    если 1, необходима авторизация пользователя для
                                    использования функций управления сервером
                                    ( Leto_mggetinfo(), etc. );
      Pass_for_Data = 0        -    если 1, необходима авторизация пользователя для
                                    модификации данных;
      Pass_File = "leto_users" -    путь и имя файла информации пользователей;
      Crypt_Traffic = 0        -    если 1, то данные, передаваемые по сети, шифруются;
      Share_Tables  = 0        -    если 0 (по умолчанию, этот режим существует с момента
                                    старта проекта letodb), letodb открывает все таблицы
                                    в монопольном режиме, что позволяет увеличить
                                    производительность. Если 1 (новый режим, добавлен после 11.06.2009),
                                    таблицы открываются в том режима, в каком их открывает
                                    клиентское приложение, монопольном или режиме разделения, что
                                    позволяет letodb работать совместно с другими приложениями.
      Cache_Records            -    Кол-во записей, читаемых за один раз (в кэш клиента)
      Max_Vars_Number = 10000  -    Максимальное количество разделяемых переменных
      Max_Var_Size = 10000     -    Максимальный размер текстовой переменной

      Возможно определить секцию [DATABASE], если Вы хотите указать каталог БД,
 в котором таблицы должны открываться другим RDD:

      [DATABASE]
      DataPath =               -    (обязательная опция)
      Driver = CDX             -    ( CDX/NTX )

      Можно определить столько секций [DATABASE], сколько необходимо.

      В Windows файл letodb.ini должен быть размещен в том каталоге, в
 котором находится сервер letodb.
      В Linux сервер ищет этот файл в том каталоге, откуда он стартовал,
 или, при неудаче, в каталоге /etc.

      4.2 Авторизация пользователей

      Чтобы включить подсистему авторизации, необходимо установить один из следующих параметров
 letodb.ini в 1: Pass_for_Login, Pass_for_Manage, Pass_for_Data. Но перед этим
 необходимо создать, как минимум, одного пользователя с правами администратора, поскольку когда
 система авторизации работает, только авторизованные пользователи с правами администратора могут
 добавлять/изменять пользователей и пароли.
      Чтобы добавить пользователя, необходимо включить вызов функции LETO_USERADD() в клиентскую
 программу, к примеру:

      LETO_USERADD( "admin", "secret:)", "YYY" )

 где "YYY" это строка, которая дает права администрирования, управления и права на запись. Вы можете
 также использовать программу utils/manager/console.prg, чтобы установить или изменить данные авторизации.

 Для соединения с сервером с данными авторизации ( именем пользователя и паролем) необходимо
 вызвать функцию LETO_CONNECT().

      5. Соединение с сервером клиентских программ

      Чтобы сконнектиться с сервером, прежде всего необходимо прилинковать rddleto.lib (Windows)
 или librddleto.a (Linux) у своему приложению, и добавить в начале своей программы 
 две строки:

      REQUEST LETO
      RDDSETDEFAULT( "LETO" )

      Для открытия файла dbf на сервере необходимо вставить в оператор SET PATH TO,
 или в команду USE путь к серверу в стандартной форме:
 //ip_address:port/data_path/file_name.

      Если задан параметр 'DataPath' в конфигурационном файле сервера, и он имеет
 непустое значение, необходимо указывать не полный путь к файлу на сервере,
 а путь относительный ( относительно значению 'DataPath' ).
      Например, если необходимо открыть файл test.dbf, который расположен на
 сервере 192.168.5.22 в каталоге /data/mydir и значение параметра 'DataPath'
 ( в файле конфигурации сервере letodb.ini ) '/data', синтаксис должен быть
 таким:

      USE "//192.168.5.22:2812/mydir/test"

      Если сервер не запущен или Вы указали неверный путь, будет сгенерирована ошибка открытия.
 Возможно проверить доступность сервера перед открытием файлов вызовом функции
 leto_Connect( cAddress ), которая вернет -1 в случае неудачной попытки:

      IF leto_Connect( "//192.168.5.22:2812/mydir/" ) == -1
         Alert( "Can't connect to server ..." )
      ENDIF

      6. Управление переменными

      Letodb позволяет создавать переменные, которые разделяются между приложениями,
 которые соединились с сервером. Переменные можно разбить на группы, и они могут иметь логический,
 целый или символьный тип. Можно установить значение переменной, получить его, удалить, или вызвать
 инкремент/декремент ( числовой переменной, естественно ). Все операции с переменными выполняются
 последовательно в одном потоке, так что переменные могут использоваться как семафоры. См. список
 функций для синтаксиса нужной функции, и пример tests/test_var.prg.
      Файл Letodb.ini может содержать строку для определения максимального количества переменных
 и максимальной длины текстовой переменной.

      7. Список функций

      Ниже приведен полный ( на момент написания ) список функций,
 доступных для использования в клиенском приложении с прилинкованным RDD LETO.

      LETO_CONNECT( cAddress [, cUserName, cPassword ] )   --> nConnection, -1 при неудаче
      LETO_CONNECT_ERR()                                   --> nError
      LETO_DISCONNECT()
      LETO_SETCURRENTCONNECTION( nConnection )
      LETO_GETCURRENTCONNECTION()                          --> nConnection
      LETO_GETSERVERVERSION()                              --> cVersion
      LETO_GETLOCALIP()                                    --> IP адрес клиента

      LETO_BEGINTRANSACTION()
      LETO_ROLLBACK()
      LETO_COMMITTRANSACTION( [ lUnlockAll ] )             --> lSuccess
      LETO_INTRANSACTION()                                 --> lTransactionActive

      LETO_SUM( cFieldNames , [ cFilter ], [xScope], [xScopeBottom] )
                                                           --> nSumma - если пепредано одно поле, или
                                                               {nSumma1, nSumma2, ...} для нескольких полей
      LETO_ISFLTOPTIM()                                    --> lFilterOptimized
      LETO_SETSKIPBUFFER( nSkip )
      LETO_SETFASTAPPEND( lFastAppend )                    --> lFastAppend (предыдущее значение)

      LETO_FILE( cFileName )                               --> lFileExists
      LETO_FERASE( cFileName )                             --> -1 при неудаче
      LETO_FRENAME( cFileName, cFileNewName )              --> -1 при неудаче
      LETO_MEMOREAD( cFileName )                           --> cStr
      LETO_FERROR()                                        --> nError

      LETO_MGGETINFO()
      LETO_MGGETUSERS()
      LETO_MGGETTABLES()
      LETO_MGGETTIME()
      LETO_MGKILL()

      LETO_USERADD( cUserName, cPass [, cRights ] )        --> lSuccess
      LETO_USERPASSWD( cUserName, cPass )                  --> lSuccess
      LETO_USERRIGHTS( cUserName, cRights )                --> lSuccess
      LETO_USERFLUSH()                                     --> lSuccess
      LETO_USERGETRIGHTS()                                 --> cRights

      LETO_VARSET( cGroupName, cVarName, xValue[, nFlags[, @xRetValue]] ) --> lSuccess
      LETO_VARGET( cGroupName, cVarName )                  --> xValue
      LETO_VARINCR( cGroupName, cVarName )                 --> nValue
      LETO_VARDECR( cGroupName, cVarName )                 --> nValue
      LETO_VARDEL( cGroupName, cVarName )                  --> lSuccess
      LETO_VARGETLIST( [cGroupName [, nMaxLen]] )          --> aList

      8. Утилита управления сервером

      Можно собрать две утилиты управления сервером, GUI и консольную. Исходные тексты
 находятся в каталоге utils/manage directory.

      Утилита GUI, manage.prg, создана с помощью библиотеки HwGUI. Если у Вас установлена HwGUI,
 вставьте строку 'set HWGUI_INSTALL=' в файл utils/manage/bld.bat путь к 
 каталогу HwGUI и запустите bld.bat. Утилита manage.exe будет собрана.
   
      Для тех, кто не использует HwGUI, есть утилита управления в режиме консоли,
 console.prg. Соберите console.exe с помощью файла make/bat, который Вы используете
 для сборки программы Harbour, состоящей из одного модуля. Необходимо только добавить
 rddleto.lib к списку библиотек. Запуститe console.exe с именем сервера или ip адресом
 и номером порта в качестве параметра:

      console.exe server_name:nPort
      console.exe ip_address:nPort

 server_name и ip_address в командной строке должен быть без ведущих слешей
 ( '//' ), поскольку Clipper/Harbour использует их для своих нужд.
